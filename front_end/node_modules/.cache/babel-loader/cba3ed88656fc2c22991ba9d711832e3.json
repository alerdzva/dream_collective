{"ast":null,"code":"export function createNewTopic(topic, callback) {\n  fetch('/topics/', {\n    method: 'POST',\n    body: JSON.stringify(topic),\n    headers: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json',\n      'Mode': \"CORS\"\n    }\n  }).then(response => response.json()).then(data => {\n    callback(data);\n  });\n}\nexport function updateTopic(id, topic, callback) {\n  fetch('/topics/' + id, {\n    method: 'PUT',\n    body: JSON.stringify(topic),\n    headers: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json',\n      'Mode': \"CORS\"\n    }\n  }).then(response => response.json()).then(data => {\n    callback(data);\n  });\n}\nexport function readTopic(id, callback) {\n  fetch('/topics/' + id, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json',\n      'Mode': \"CORS\"\n    }\n  }).then(response => response.json()).then(data => {\n    callback(data);\n  });\n}\nexport function readAllTopics(callback) {\n  fetch('/topics/', {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json',\n      'Mode': \"CORS\"\n    }\n  }).then(response => response.json()).then(data => {\n    callback(data);\n  });\n}\nexport function createNewFeature(feature, callback) {\n  fetch('/features/', {\n    method: 'POST',\n    body: JSON.stringify(feature),\n    headers: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json',\n      'Mode': \"CORS\"\n    }\n  }).then(response => response.json()).then(data => {\n    callback(data);\n  });\n}\nexport function readFeaturesOfTopic(topicId, callback) {\n  fetch(\"/features/topic/\" + topicId, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\",\n      Mode: \"CORS\"\n    }\n  }).then(response => response.json()).then(data => {\n    callback(data);\n  });\n}\nexport function createNewPrompt(prompt, callback) {\n  fetch('/prompts/', {\n    method: 'POST',\n    body: JSON.stringify(prompt),\n    headers: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json',\n      'Mode': \"CORS\"\n    }\n  }).then(response => response.json()).then(data => {\n    callback(data);\n  });\n}\nexport function readPromptsOfTopic(topicId, callback) {\n  fetch(\"/prompts/topic/\" + topicId, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\",\n      Mode: \"CORS\"\n    }\n  }).then(response => response.json()).then(data => {\n    callback(data);\n  });\n}\nexport function createNewResponse(response, callback) {\n  fetch('/responses/', {\n    method: 'POST',\n    body: JSON.stringify(response),\n    headers: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json',\n      'Mode': \"CORS\"\n    }\n  }).then(response => response.json()).then(data => {\n    callback(data);\n  });\n}\nexport function readResponse(id, callback) {\n  fetch('/responses/' + id, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json',\n      'Mode': \"CORS\"\n    }\n  }).then(response => response.json()).then(data => {\n    callback(data);\n  });\n}\nexport function readResponsesOfTopic(topicId, callback) {\n  fetch(\"/responses/topic/\" + topicId, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\",\n      Mode: \"CORS\"\n    }\n  }).then(response => response.json()).then(data => {\n    callback(data);\n  });\n}","map":{"version":3,"sources":["/Users/piyum/Desktop/tempfolder/frontend_dreamcollective/src/utils/APICalls.js"],"names":["createNewTopic","topic","callback","fetch","method","body","JSON","stringify","headers","then","response","json","data","updateTopic","id","readTopic","readAllTopics","createNewFeature","feature","readFeaturesOfTopic","topicId","Accept","Mode","createNewPrompt","prompt","readPromptsOfTopic","createNewResponse","readResponse","readResponsesOfTopic"],"mappings":"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","sourcesContent":["export function createNewTopic(topic, callback) {\n    fetch('/topics/',\n      {\n        method: 'POST',\n        body: JSON.stringify(topic),\n        headers: {\n          'Accept': 'application/json, text/plain, */*',\n          'Content-Type': 'application/json',\n          'Mode': \"CORS\"\n        }\n      }).then(response => response.json())\n      .then(data => { callback(data) }\n      );\n  }\n\n  export function updateTopic(id, topic, callback) {\n    fetch('/topics/' + id,\n      {\n        method: 'PUT',\n        body: JSON.stringify(topic),\n        headers: {\n          'Accept': 'application/json, text/plain, */*',\n          'Content-Type': 'application/json',\n          'Mode': \"CORS\"\n        }\n      }).then(response => response.json())\n      .then(data => { callback(data) }\n      );\n  }\n\n  export function readTopic(id, callback) {\n    fetch('/topics/' + id,\n      {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json, text/plain, */*',\n          'Content-Type': 'application/json',\n          'Mode': \"CORS\"\n        }\n      }).then(response => response.json())\n      .then(data => { callback(data) }\n      );\n  }\n\n  export function readAllTopics(callback) {\n    fetch('/topics/',\n      {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json, text/plain, */*',\n          'Content-Type': 'application/json',\n          'Mode': \"CORS\"\n        }\n      }).then(response => response.json())\n      .then(data => { callback(data) }\n      );\n  }\n\n\n  export function createNewFeature(feature, callback) {\n      fetch('/features/',\n        {\n          method: 'POST',\n          body: JSON.stringify(feature),\n          headers: {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json',\n            'Mode': \"CORS\"\n          }\n        }).then(response => response.json())\n        .then(data => { callback(data) }\n        );\n    }\n\n\n    export function readFeaturesOfTopic(topicId, callback) {\n      fetch(\"/features/topic/\"+topicId, {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json, text/plain, */*\",\n          \"Content-Type\": \"application/json\",\n          Mode: \"CORS\",\n        },\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          callback(data);\n        });\n    }\n\n\n\n    export function createNewPrompt(prompt, callback) {\n        fetch('/prompts/',\n          {\n            method: 'POST',\n            body: JSON.stringify(prompt),\n            headers: {\n              'Accept': 'application/json, text/plain, */*',\n              'Content-Type': 'application/json',\n              'Mode': \"CORS\"\n            }\n          }).then(response => response.json())\n          .then(data => { callback(data) }\n          );\n    }\n      \n     export function readPromptsOfTopic(topicId, callback) {\n       fetch(\"/prompts/topic/\" + topicId, {\n         method: \"GET\",\n         headers: {\n           Accept: \"application/json, text/plain, */*\",\n           \"Content-Type\": \"application/json\",\n           Mode: \"CORS\",\n         },\n       })\n         .then((response) => response.json())\n         .then((data) => {\n           callback(data);\n         });\n     }\n\n\n\n      export function createNewResponse(response, callback) {\n          fetch('/responses/',\n            {\n              method: 'POST',\n              body: JSON.stringify(response),\n              headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json',\n                'Mode': \"CORS\"\n              }\n            }).then(response => response.json())\n            .then(data => { callback(data) }\n            );\n        }\n\n\n\n\n  export function readResponse(id, callback) {\n    fetch('/responses/' + id,\n      {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json, text/plain, */*',\n          'Content-Type': 'application/json',\n          'Mode': \"CORS\"\n        }\n      }).then(response => response.json())\n      .then(data => { callback(data) }\n      );\n  }\n\n  export function readResponsesOfTopic(topicId, callback) {\n    fetch(\"/responses/topic/\" + topicId, {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json, text/plain, */*\",\n        \"Content-Type\": \"application/json\",\n        Mode: \"CORS\",\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        callback(data);\n      });\n  }\n\n        "]},"metadata":{},"sourceType":"module"}